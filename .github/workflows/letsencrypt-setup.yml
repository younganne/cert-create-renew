name: Let's Encrypt Certificate Setup with Cross-Account Route53

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - create
          - renew
        default: 'create'
      domain:
        description: 'Domain to obtain/renew certificate for'
        required: true
      email:
        description: 'Email for Let''s Encrypt notifications'
        required: true
      verification_method:
        description: 'Certificate verification method'
        required: true
        type: choice
        options:
          - dns
          - http
        default: 'dns'
      target_config:
        description: 'JSON string with verification config (hosted_zone_id for DNS, webroot_path for HTTP)'
        required: true
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      upload_target:
        description: 'JSON string with upload config (host, user, path). Leave empty to skip upload'
        required: false
        default: ''

permissions:
  id-token: write
  contents: read

env:
  DNS_ACCOUNT: ${{ secrets.AWS_DNS_ACCOUNT_ID }}
  APP_ACCOUNT: ${{ secrets.AWS_APP_ACCOUNT_ID }}

jobs:
  setup-certificate:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse configuration
        id: config
        run: |
          # Parse target configuration
          TARGET_CONFIG='${{ inputs.target_config }}'
          if [[ '${{ inputs.verification_method }}' == 'dns' ]]; then
            echo "hosted_zone_id=$(echo $TARGET_CONFIG | jq -r '.hosted_zone_id')" >> $GITHUB_OUTPUT
          else
            echo "webroot_path=$(echo $TARGET_CONFIG | jq -r '.webroot_path')" >> $GITHUB_OUTPUT
          fi
          
          # Parse upload configuration if provided
          if [[ -n '${{ inputs.upload_target }}' ]]; then
            UPLOAD_CONFIG='${{ inputs.upload_target }}'
            echo "remote_host=$(echo $UPLOAD_CONFIG | jq -r '.host')" >> $GITHUB_OUTPUT
            echo "remote_user=$(echo $UPLOAD_CONFIG | jq -r '.user')" >> $GITHUB_OUTPUT
            echo "remote_path=$(echo $UPLOAD_CONFIG | jq -r '.path')" >> $GITHUB_OUTPUT
            echo "do_upload=true" >> $GITHUB_OUTPUT
          else
            echo "do_upload=false" >> $GITHUB_OUTPUT
          fi

      # Configure AWS credentials for DNS account if using DNS verification
      - name: Configure DNS Account Credentials
        if: ${{ inputs.verification_method == 'dns' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.DNS_ACCOUNT }}:role/${{ secrets.AWS_DNS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 900
          role-session-name: DNSSessionGHA

      # Configure AWS credentials for App account
      - name: Configure App Account Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.APP_ACCOUNT }}:role/${{ secrets.AWS_APP_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600
          role-session-name: AppSessionGHA

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install AWS CLI and Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 certbot certbot-dns-route53
          sudo apt-get update
          sudo apt-get install -y python3-certbot python3-certbot-dns-route53

      - name: Setup SSH key
        if: steps.config.outputs.do_upload == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.config.outputs.remote_host }} >> ~/.ssh/known_hosts

      - name: Run certificate management
        run: |
          sudo -E ./setup_certificate.py \
            ${{ github.event.inputs.domain }} \
            ${{ github.event.inputs.email }} \
            --action ${{ github.event.inputs.action }} \
            --verification ${{ github.event.inputs.verification_method }} \
            ${{ inputs.verification_method == 'dns' && format('--hosted-zone-id {0}', steps.config.outputs.hosted_zone_id) || format('--webroot-path {0}', steps.config.outputs.webroot_path) }} \
            ${{ github.event.inputs.environment == 'staging' && '--staging' || '' }}

      - name: Upload certificates
        if: steps.config.outputs.do_upload == 'true'
        run: |
          scp -r certificates/* ${{ steps.config.outputs.remote_user }}@${{ steps.config.outputs.remote_host }}:${{ steps.config.outputs.remote_path }}/
          # Verify upload
          ssh ${{ steps.config.outputs.remote_user }}@${{ steps.config.outputs.remote_host }} "ls -l ${{ steps.config.outputs.remote_path }}"

      - name: Cleanup sensitive files
        if: always()
        run: |
          sudo rm -rf certificates/
          sudo rm -f setup_certificate.py
          rm -f ~/.ssh/id_rsa